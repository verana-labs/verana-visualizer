name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Build and Test Job
  build-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Run TypeScript type check
      run: npx tsc --noEmit
      
    - name: Build application
      run: npm run build
      env:
        NEXT_PUBLIC_API_ENDPOINT: https://api.testnet.verana.network
        NEXT_PUBLIC_RPC_ENDPOINT: https://rpc.testnet.verana.network
        NEXT_PUBLIC_IDX_ENDPOINT: https://idx.testnet.verana.network
        NEXT_PUBLIC_RESOLVER_ENDPOINT: https://resolver.testnet.verana.network
        NEXT_PUBLIC_CHAIN_ID: vna-testnet-1
        NEXT_PUBLIC_CHAIN_NAME: Testnet
        NEXT_PUBLIC_APP_NAME: Verana Visualizer
        NEXT_PUBLIC_APP_LOGO: logo.svg

  # Security Audit Job
  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      
    - name: Check for known vulnerabilities
      run: npx audit-ci --config .audit-ci.json || true

  # Docker Build Job (on main branch)
  docker-build:
    needs: [build-and-test, security-audit]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_LOGIN }}
        password: ${{ secrets.DOCKER_HUB_PWD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_HUB_LOGIN }}/verana-visualizer
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging (on develop branch)
  deploy-staging:
    needs: [build-and-test, security-audit]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: kubectl apply -f k8s/staging/
        
  # Deploy to Production (on main branch)
  deploy-production:
    needs: [build-and-test, security-audit, docker-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: kubectl apply -f k8s/production/

  # Notification Job
  notify:
    needs: [build-and-test, security-audit]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.build-and-test.result == 'success' && needs.security-audit.result == 'success'
      run: |
        echo "✅ All checks passed successfully!"
        
    - name: Notify on failure
      if: needs.build-and-test.result == 'failure' || needs.security-audit.result == 'failure'
      run: |
        echo "❌ Build or security checks failed!"
        exit 1
